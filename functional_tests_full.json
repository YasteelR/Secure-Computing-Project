[
    {
        "id": "FUNC-001",
        "code": "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)",
        "correct_code": "def factorial(n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    if n > 1000:\n        raise ValueError(\"Input too large\")\n    if n == 0 or n == 1:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result",
        "requirement": "Calculate factorial with input validation and overflow protection",
        "function_name": "factorial",
        "type": "functional",
        "category": "Mathematical Operations",
        "source": "HumanEval",
        "reference": "https://github.com/openai/human-eval"
    },
    {
        "id": "FUNC-002",
        "code": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)",
        "correct_code": "def fibonacci(n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    if n > 100:\n        raise ValueError(\"Input too large\")\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
        "requirement": "Calculate Fibonacci numbers efficiently with bounds checking",
        "function_name": "fibonacci",
        "type": "functional",
        "category": "Algorithm Implementation",
        "source": "HumanEval",
        "reference": "https://github.com/openai/human-eval"
    },
    {
        "id": "FUNC-003",
        "code": "def merge_lists(list1, list2):\n    result = []\n    i = j = 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] <= list2[j]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list2[j])\n            j += 1\n    result.extend(list1[i:])\n    result.extend(list2[j:])\n    return result",
        "correct_code": "def merge_lists(list1, list2):\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        raise TypeError(\"Both inputs must be lists\")\n    if not list1:\n        return list2.copy()\n    if not list2:\n        return list1.copy()\n    if list1 != sorted(list1) or list2 != sorted(list2):\n        raise ValueError(\"Input lists must be sorted\")\n    result = []\n    i = j = 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] <= list2[j]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list2[j])\n            j += 1\n    result.extend(list1[i:])\n    result.extend(list2[j:])\n    return result",
        "requirement": "Merge two sorted lists with input validation",
        "function_name": "merge_lists",
        "type": "functional",
        "category": "Algorithm Implementation",
        "source": "LeetCode",
        "reference": "https://leetcode.com/problems/merge-two-sorted-lists/"
    },
    {
        "id": "FUNC-004",
        "code": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
        "correct_code": "def binary_search(arr, target):\n    if not isinstance(arr, (list, tuple)):\n        raise TypeError(\"Array must be a list or tuple\")\n    if not arr:\n        return -1\n    if arr != sorted(arr):\n        raise ValueError(\"Array must be sorted for binary search\")\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
        "requirement": "Implement binary search with input validation",
        "function_name": "binary_search",
        "type": "functional",
        "category": "Algorithm Implementation",
        "source": "LeetCode",
        "reference": "https://leetcode.com/problems/binary-search/"
    },
    {
        "id": "FUNC-005",
        "code": "def count_words(text):\n    words = text.split()\n    return len(words)",
        "correct_code": "def count_words(text):\n    import re\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    if len(text) > 1000000:\n        raise ValueError(\"Text too long (max 1M characters)\")\n    words = re.findall(r'\\b\\w+\\b', text)\n    return len(words)",
        "requirement": "Count words in text with proper boundary detection",
        "function_name": "count_words",
        "type": "functional",
        "category": "Text Processing",
        "source": "HumanEval",
        "reference": "https://github.com/openai/human-eval"
    },
    {
        "id": "FUNC-006",
        "code": "def is_palindrome(s):\n    return s == s[::-1]",
        "correct_code": "def is_palindrome(s):\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    cleaned = ''.join(c.lower() for c in s if c.isalnum())\n    return cleaned == cleaned[::-1]",
        "requirement": "Check if a string is a palindrome (case-insensitive, alphanumeric only)",
        "function_name": "is_palindrome",
        "type": "functional",
        "category": "String Processing",
        "source": "LeetCode",
        "reference": "https://leetcode.com/problems/valid-palindrome/"
    },
    {
        "id": "FUNC-007",
        "code": "def remove_duplicates(lst):\n    return list(set(lst))",
        "correct_code": "def remove_duplicates(lst):\n    if not isinstance(lst, (list, tuple)):\n        raise TypeError(\"Input must be a list or tuple\")\n    if not lst:\n        return []\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result",
        "requirement": "Remove duplicates from list while preserving order",
        "function_name": "remove_duplicates",
        "type": "functional",
        "category": "Data Processing",
        "source": "HumanEval",
        "reference": "https://github.com/openai/human-eval"
    },
    {
        "id": "FUNC-008",
        "code": "def calculate_average(numbers):\n    return sum(numbers) / len(numbers)",
        "correct_code": "def calculate_average(numbers):\n    if not isinstance(numbers, (list, tuple)):\n        raise TypeError(\"Input must be a list or tuple\")\n    if not numbers:\n        raise ValueError(\"Cannot calculate average of empty list\")\n    if not all(isinstance(x, (int, float)) for x in numbers):\n        raise TypeError(\"All elements must be numbers\")\n    if len(numbers) > 1000000:\n        raise ValueError(\"Too many numbers (max 1M)\")\n    try:\n        total = sum(numbers)\n        count = len(numbers)\n        return total / count\n    except OverflowError:\n        raise ValueError(\"Numbers too large for calculation\")",
        "requirement": "Calculate average of numbers with comprehensive error handling",
        "function_name": "calculate_average",
        "type": "functional",
        "category": "Mathematical Operations",
        "source": "HumanEval",
        "reference": "https://github.com/openai/human-eval"
    },
    {
        "id": "FUNC-009",
        "code": "def sort_numbers(numbers):\n    return sorted(numbers)",
        "correct_code": "def sort_numbers(numbers):\n    if not isinstance(numbers, (list, tuple)):\n        raise TypeError(\"Input must be a list or tuple\")\n    if not numbers:\n        return []\n    if not all(isinstance(x, (int, float)) for x in numbers):\n        raise TypeError(\"All elements must be numbers\")\n    if len(numbers) > 1000000:\n        raise ValueError(\"Too many numbers to sort (max 1M)\")\n    try:\n        return sorted(numbers)\n    except OverflowError:\n        raise ValueError(\"Numbers too large to sort\")",
        "requirement": "Sort a list of numbers with input validation",
        "function_name": "sort_numbers",
        "type": "functional",
        "category": "Data Processing",
        "source": "HumanEval",
        "reference": "https://github.com/openai/human-eval"
    },
    {
        "id": "FUNC-010",
        "code": "def validate_email(email):\n    if '@' in email and '.' in email:\n        return True\n    return False",
        "correct_code": "def validate_email(email):\n    import re\n    if not isinstance(email, str):\n        return False\n    if len(email) > 254:\n        return False\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}\n    return bool(re.match(pattern, email))",
        "requirement": "Validate email addresses according to RFC standards",
        "function_name": "validate_email",
        "type": "functional",
        "category": "Input Validation",
        "source": "HumanEval",
        "reference": "https://github.com/openai/human-eval"
    },
    {
        "id": "FUNC-011",
        "code": "def parse_json_data(json_string):\n    import json\n    data = json.loads(json_string)\n    return data['result']['value']",
        "correct_code": "def parse_json_data(json_string):\n    import json\n    try:\n        data = json.loads(json_string)\n        if not isinstance(data, dict):\n            raise ValueError(\"JSON must be an object\")\n        if 'result' not in data:\n            raise KeyError(\"Missing 'result' key in JSON\")\n        if 'value' not in data['result']:\n            raise KeyError(\"Missing 'value' key in JSON result\")\n        return data['result']['value']\n    except json.JSONDecodeError as e:\n        raise ValueError(f\"Invalid JSON: {e}\")",
        "requirement": "Parse JSON data with comprehensive error handling",
        "function_name": "parse_json_data",
        "type": "functional",
        "category": "Data Parsing",
        "source": "HumanEval",
        "reference": "https://github.com/openai/human-eval"
    },
    {
        "id": "FUNC-012",
        "code": "def find_max_subarray_sum(arr):\n    max_sum = 0\n    current_sum = 0\n    for num in arr:\n        current_sum += num\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum",
        "correct_code": "def find_max_subarray_sum(arr):\n    if not isinstance(arr, (list, tuple)):\n        raise TypeError(\"Input must be a list or tuple\")\n    if not arr:\n        raise ValueError(\"Array cannot be empty\")\n    if not all(isinstance(x, (int, float)) for x in arr):\n        raise TypeError(\"All elements must be numbers\")\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum",
        "requirement": "Find maximum subarray sum using Kadane's algorithm",
        "function_name": "find_max_subarray_sum",
        "type": "functional",
        "category": "Algorithm Implementation",
        "source": "LeetCode",
        "reference": "https://leetcode.com/problems/maximum-subarray/"
    },
    {
        "id": "FUNC-013",
        "code": "def validate_credit_card(card_number):\n    digits = [int(d) for d in card_number if d.isdigit()]\n    return len(digits) == 16",
        "correct_code": "def validate_credit_card(card_number):\n    if not isinstance(card_number, str):\n        raise TypeError(\"Card number must be a string\")\n    clean_number = ''.join(c for c in card_number if c.isdigit())\n    if len(clean_number) < 13 or len(clean_number) > 19:\n        return False\n    digits = [int(d) for d in clean_number]\n    checksum = 0\n    reverse_digits = digits[::-1]\n    for i, digit in enumerate(reverse_digits):\n        if i % 2 == 1:\n            digit *= 2\n            if digit > 9:\n                digit = digit // 10 + digit % 10\n        checksum += digit\n    return checksum % 10 == 0",
        "requirement": "Validate credit card numbers using Luhn algorithm",
        "function_name": "validate_credit_card",
        "type": "functional",
        "category": "Financial Validation",
        "source": "Industry Standard",
        "reference": "https://en.wikipedia.org/wiki/Luhn_algorithm"
    },
    {
        "id": "FUNC-014",
        "code": "def compress_string(s):\n    compressed = \"\"\n    i = 0\n    while i < len(s):\n        char = s[i]\n        count = 1\n        while i + count < len(s) and s[i + count] == char:\n            count += 1\n        compressed += char + str(count)\n        i += count\n    return compressed",
        "correct_code": "def compress_string(s):\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    if not s:\n        return \"\"\n    if len(s) > 1000000:\n        raise ValueError(\"String too long (max 1M characters)\")\n    compressed = \"\"\n    i = 0\n    while i < len(s):\n        char = s[i]\n        count = 1\n        while i + count < len(s) and s[i + count] == char:\n            count += 1\n        if count == 1:\n            compressed += char\n        else:\n            compressed += char + str(count)\n        i += count\n    return compressed if len(compressed) < len(s) else s",
        "requirement": "Compress string using run-length encoding with efficiency check",
        "function_name": "compress_string",
        "type": "functional",
        "category": "String Processing",
        "source": "Coding Interview",
        "reference": "N/A"
    },
    {
        "id": "FUNC-015",
        "code": "def perfect_function(data):\n    if isinstance(data, list) and all(isinstance(x, int) for x in data):\n        return sorted([x for x in data if x > 0])\n    raise TypeError(\"Input must be a list of integers\")",
        "correct_code": "def perfect_function(data):\n    if isinstance(data, list) and all(isinstance(x, int) for x in data):\n        return sorted([x for x in data if x > 0])\n    raise TypeError(\"Input must be a list of integers\")",
        "requirement": "Filter and sort positive integers from a list",
        "function_name": "perfect_function",
        "type": "functional",
        "category": "Perfect Implementation",
        "source": "Test Case",
        "reference": "N/A"
    }
]