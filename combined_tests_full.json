[
    {
        "id": "COMBINED-AUTH-001",
        "code": "def authenticate_user(username, password):\n    import sqlite3\n    conn = sqlite3.connect('users.db')\n    query = f\"SELECT * FROM users WHERE username = '{username}' AND password = '{password}'\"\n    result = conn.execute(query).fetchone()\n    conn.close()\n    return result",
        "vulnerabilities": ["SQL Injection", "Plain Text Password Storage"],
        "functional_issues": ["No Input Validation", "Poor Error Handling"],
        "type": "combined",
        "severity": "Critical",
        "category": "Authentication Security"
    },
    {
        "id": "COMBINED-UPLOAD-002",
        "code": "def upload_file(filename, content):\n    import os\n    file_path = f\"/uploads/{filename}\"\n    with open(file_path, 'wb') as f:\n        f.write(content)\n    return file_path",
        "vulnerabilities": ["Path Traversal", "Unrestricted File Upload"],
        "functional_issues": ["No File Size Limit", "No File Type Validation"],
        "type": "combined",
        "severity": "High",
        "category": "File Handling Security"
    },
    {
        "id": "COMBINED-XML-003",
        "code": "def process_xml(xml_string):\n    import xml.etree.ElementTree as ET\n    root = ET.fromstring(xml_string)\n    return root.find('data').text",
        "vulnerabilities": ["XXE Injection", "XML Bomb"],
        "functional_issues": ["No Error Handling", "Missing Null Checks"],
        "type": "combined",
        "severity": "High",
        "category": "XML Processing"
    },
    {
        "id": "COMBINED-CMD-004",
        "code": "def execute_command(user_input):\n    import os\n    command = f\"ls -la {user_input}\"\n    result = os.system(command)\n    return result",
        "vulnerabilities": ["Command Injection", "Shell Execution"],
        "functional_issues": ["No Input Sanitization", "Poor Return Value Handling"],
        "type": "combined",
        "severity": "Critical",
        "category": "Command Execution"
    },
    {
        "id": "COMBINED-CRYPTO-005",
        "code": "def hash_password(password):\n    import hashlib\n    return hashlib.md5(password.encode()).hexdigest()",
        "vulnerabilities": ["Weak Hashing Algorithm", "No Salt"],
        "functional_issues": ["No Input Validation", "Fixed Hash Algorithm"],
        "type": "combined",
        "severity": "High",
        "category": "Cryptography"
    },
    {
        "id": "COMBINED-SESSION-006",
        "code": "def create_user_session(user_id):\n    import uuid\n    session_id = str(uuid.uuid4())\n    sessions[session_id] = {'user_id': user_id, 'created': time.time()}\n    return session_id",
        "vulnerabilities": ["Predictable Session ID", "No Session Expiry"],
        "functional_issues": ["Global Variable Usage", "No Concurrent Access Control"],
        "type": "combined",
        "severity": "Medium",
        "category": "Session Management"
    },
    {
        "id": "COMBINED-API-007",
        "code": "def generate_api_key():\n    import random\n    import string\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=32))",
        "vulnerabilities": ["Weak Random Number Generation", "Predictable Keys"],
        "functional_issues": ["No Key Length Validation", "Fixed Character Set"],
        "type": "combined",
        "severity": "High",
        "category": "API Security"
    },
    {
        "id": "COMBINED-DB-008",
        "code": "def get_user_data(user_id, cache={}):\n    query = f\"SELECT * FROM users WHERE id = {user_id}\"\n    result = db.execute(query)\n    processed_data = []\n    for row in result:\n        processed_data.append({\n            'id': row[0],\n            'name': row[1],\n            'email': row[2]\n        })\n    return processed_data",
        "vulnerabilities": ["SQL Injection", "Information Disclosure"],
        "functional_issues": ["Inefficient Data Processing", "No Caching Implementation"],
        "type": "combined",
        "severity": "High",
        "category": "Database Operations"
    },
    {
        "id": "COMBINED-SERIALIZE-009",
        "code": "def serialize_user_data(user_data):\n    import pickle\n    return pickle.dumps(user_data)",
        "vulnerabilities": ["Insecure Deserialization", "Code Injection"],
        "functional_issues": ["No Input Validation", "Binary Format Issues"],
        "type": "combined",
        "severity": "Critical",
        "category": "Data Serialization"
    },
    {
        "id": "COMBINED-LOG-010",
        "code": "def log_user_action(user_id, action, request):\n    import logging\n    logging.info(f\"User {user_id} performed {action} from {request.remote_addr}\")",
        "vulnerabilities": ["Log Injection", "Information Leakage"],
        "functional_issues": ["No Input Sanitization", "Missing Error Handling"],
        "type": "combined",
        "severity": "Low",
        "category": "Logging"
    },
    {
        "id": "COMBINED-DOWNLOAD-011",
        "code": "def download_file(url, filename):\n    import urllib.request\n    urllib.request.urlretrieve(url, filename)\n    return f\"Downloaded {url} to {filename}\"",
        "vulnerabilities": ["SSRF", "Path Traversal"],
        "functional_issues": ["No Size Limit", "No URL Validation"],
        "type": "combined",
        "severity": "High",
        "category": "File Download"
    },
    {
        "id": "COMBINED-JWT-012",
        "code": "def create_jwt_token(user_id, secret):\n    import jwt\n    import time\n    payload = {'user_id': user_id, 'exp': time.time() + 3600}\n    return jwt.encode(payload, secret, algorithm='HS256')",
        "vulnerabilities": ["Weak Secret", "Algorithm Confusion"],
        "functional_issues": ["No Input Validation", "Fixed Expiration"],
        "type": "combined",
        "severity": "Medium",
        "category": "Authentication"
    },
    {
        "id": "COMBINED-VALIDATE-013",
        "code": "def validate_email(email):\n    if '@' in email and '.' in email:\n        return True\n    return False",
        "vulnerabilities": ["Bypass Validation", "Insufficient Checks"],
        "functional_issues": ["Poor Regex Logic", "No Length Validation"],
        "type": "combined",
        "severity": "Low",
        "category": "Input Validation"
    },
    {
        "id": "COMBINED-READ-014",
        "code": "def read_user_file(filename):\n    with open(filename, 'r') as f:\n        return f.read()",
        "vulnerabilities": ["Path Traversal", "Arbitrary File Read"],
        "functional_issues": ["No Size Limit", "No Error Handling"],
        "type": "combined",
        "severity": "High",
        "category": "File Operations"
    },
    {
        "id": "COMBINED-CONNECT-015",
        "code": "def connect_to_database(host, port, username, password):\n    import psycopg2\n    conn = psycopg2.connect(\n        host=host,\n        port=port,\n        user=username,\n        password=password\n    )\n    return conn",
        "vulnerabilities": ["Unencrypted Connection", "Credential Exposure"],
        "functional_issues": ["No Connection Timeout", "No Error Handling"],
        "type": "combined",
        "severity": "Medium",
        "category": "Database Connection"
    },
]
